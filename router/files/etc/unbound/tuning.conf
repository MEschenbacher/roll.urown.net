#
# Unbound configuration file for OpenWrt.
#

#=============================================
# Server Settings
#=============================================

server:

    #------------------------------------------
    # System Resources and Performance Settings
    #------------------------------------------

    # The number of threads to create to serve clients.
    # Use 1 for no threading.
    # OpenWrt default: 1
    num-threads: 1

    # Number of ports to open. This number of file descriptors can be
    # opened per thread. Must be at least 1. Default depends on com-
    # pile options. Larger numbers need extra resources from the oper-
    # ating system. For performance a very large value is best, use
    # libevent to make this possible.
    # OpenWrt default: 60
    #outgoing-range: 60

    # The number of queries that every thread will service  simultaneously. If
    # more queries  arrive  that  need servicing, and no queries can be jostled
    # out (see jostle-timeout), then the queries are dropped. This forces the
    # client to resend after a timeout; allowing the server time to work on the
    # existing queries.
    # Default depends on compile options, 512 or 1024. OpenWrt default: 30
    num-queries-per-thread: 64

    # If not 0, then set the SO_RCVBUF socket option to get more buffer space on
    # UDP port 53 incoming queries. So that short spikes on busy servers do not
    # drop packets (see counter in netstat -su). Otherwise, the number of bytes
    # to ask for, try "4m" on a busy server. The OS caps it at a maximum, on
    # linux unbound needs root permission to bypass the limit, or the admin can
    # use sysctl net.core.rmem_max.
    # Default is 0 (use system value).
    #so-rcvbuf: 0

    # If not 0, then set the SO_SNDBUF socket option to get more buffer space on
    # UDP port 53 outgoing queries. This for very busy servers handles spikes in
    # answer traffic, otherwise 'send: resource temporarily unavailable' can get
    # logged, the buffer overrun is also visible by netstat -su. Specify the
    # number of bytes to ask for, try "4m" on a very busy server. The OS caps it
    # at a maximum, on linux unbound needs root permission to bypass the limit,
    # or the admin can use sysctl net.core.wmem_max.
    # Default is 0 (use system value).
    #so-sndbuf: 0

    # If yes, then open dedicated listening sockets for incoming queries for
    # each thread and try to set the SO_REUSEPORT socket option on each socket.
    # May distribute incoming queries to threads more evenly. Default is no. On
    # Linux it is supported in  kernels >= 3.9. On other systems, FreeBSD, OSX
    # it may also work.You can enable it (on any platform and kernel), it then
    # attempts to open the port and passes the option if it was available at
    # compile time, if that works it is used, if it fails, it continues silently
    # (unless verbosity 3) without the option.
    # Default: no
    so-reuseport: yes

    # If yes, Unbound rotates RRSet order in response (the random number is
    # taken from the query ID, for speed and thread safety).
    # Default: no
    rrset-roundrobin: yes

    # If yes, Unbound doesn't insert authority/additional sections into response
    # messages when those sections are not required. This reduces response size
    # significantly, and may avoid TCP fallback for some responses. This may
    # cause a slight speedup. The default is no, because the DNS protocol RFCs
    # mandate these sections, and the additional content could be of use and
    # save roundtrips for clients.
    # Default: no
    minimal-responses: yes

    #----------------------------------------
    # Cache Settings
    #----------------------------------------

    #----------------------------------------
    # Message Cache Settings

    # Number of bytes size of the message cache. A plain number is in bytes,
    # append 'k', 'm'  or  'g' for kilobytes, megabytes or gigabytes (1024*1024
    # bytes in a megabyte).
    # Default: 4m, OpenWrt default: 100k
    msg-cache-size:4m

    # Number of slabs in the message cache. Slabs reduce lock contention by
    # threads. Must be set to a power of 2. Setting (close) to the number of
    # cpus is a reasonable guess.
    # OpenWrt default: 1
    msg-cache-slabs: 1

    # If yes, message cache elements are prefetched before they expire to keep
    # the cache up to date. Default is no. Turning it on gives about 10 percent
    # more traffic and load on the machine, but popular items do not expire from
    # the cache.
    # Default: no
    prefetch: yes

    # If enabled, unbound attempts to serve old responses from cache with a TTL
    # of 0 in the response without waiting for the actual resolution to finish.
    # The actual resolution answer ends up in the cache later on.
    # Default: no
    serve-expired: yes

    #----------------------------------------
    # Resource Records Cache Settings

    # Number of bytes size of the RRset cache. Default is 4 megabytes. A plain
    # number is in bytes, append 'k', 'm' or 'g' for kilobytes, megabytes or
    # gigabytes (1024*1024 bytes in a megabyte).
    # Default: 4m, OpenWrt default: 100k
    rrset-cache-size: 4m

    # Number of slabs in the RRset cache. Slabs reduce lock contention by
    # threads, but fragment memory usage. Must be set to a power of 2.
    # OpenWrt default: 1
    rrset-cache-slabs: 1

    # Time to live maximum for RRsets and messages in the cache. If the maximum
    # kicks in, responses to clients still get decrementing TTLs based on the
    # original (larger) values. When the internal TTL expires, the cache item has
    # expired. Can be set lower to force the resolver to query for data often, and
    # not trust (very large) TTL values.
    # Default: 86400 (1 day)
    #cache-max-ttl: 86400

    # Time to live minimum for RRsets and messages in the cache. If the minimum
    # kicks in, the data is cached for longer than the domain owner intended,
    # and thus less queries are made to look up the data. Zero makes sure the
    # data in the cache is as the domain owner intended, higher values,
    # especially more than an hour or so, can lead to trouble as the data in the
    # cache does not match up with the actual data any more.
    # Default: 0
    cache-min-ttl: 900 # 15 min

    #----------------------------------------
    # Negative Answers Cache Settings

    # Number of bytes size of the aggressive negative cache. A plain number is
    # in bytes, append 'k', 'm' or 'g' for kilobytes, megabytes or gigabytes
    # (1024*1024 bytes in a megabyte).
    # Default: 1m. OpenWRT default: 10k
    neg-cache-size: 500k

    # Time to live maximum for negative responses, these have a SOA in
    # the authority section that is limited in time.
    # Default: 3600 (1 hour)
    #cache-max-negative-ttl: 3600

    # Aggressive NSEC uses the DNSSEC NSEC chain to synthesize NXDOMAIN and
    # other denials, using information from previous NXDOMAINs answers. It
    # helps to reduce the query rate towards targets that get a very high
    # nonexistent name lookup rate.
    # Default: no
    # Added in unbound 1.7.0
    #aggressive-nsec: yes

    #----------------------------------------
    # Infrastructure Cache Settings

    # Number of slabs in the infrastructure cache. Slabs reduce lock contention
    # by threads. Must be set to a power of 2.
    # OpenWrt default: 1
    infra-cache-slabs: 1

    # Time to live in seconds for entries in the host cache. The host cache
    # contains roundtrip timing, lameness and EDNS support information.
    # Default: 900.
    # infra-host-ttl: 900

    # Number of hosts for which information is cached.
    # Default: 10,000. OpenWrt default: 200
    infra-cache-numhosts: 2500

    # Time to live in seconds for entries in the host cache. The host cache
    # contains roundtrip timing, lameness and EDNS support information.
    # Default: 900.
    infra-host-ttl: 900

    # Lower limit in milliseconds for dynamic retransmit timeout calculation in
    # infrastructure cache. Increase this value if using forwarders that need
    # more time to do recursive name resolution.
    # Default is 50
    #infra-cache-min-rtt: 50

    #----------------------------------------
    # Key Cache Settings

    # Number of bytes size of the key cache. A plain number is in bytes, append
    # 'k', 'm' or 'g' for kilobytes, megabytes or gigabytes (1024*1024 bytes in
    # a megabyte).
    # Default: 4m. OpenWRT default: 100k
    key-cache-size: 1m

    # Number of slabs in the key cache. Slabs reduce lock contention by threads.
    # Must be set to a power of 2. Setting (close) to the number of cpus is a
    # reasonable guess.
    # OpenWrt default: 1
    key-cache-slabs: 1

    # If yes, fetch the DNSKEYs earlier in the validation process, when a DS
    # record is encountered. This lowers the latency of requests. It does use a
    # little more CPU. Also if the cache is set to 0, it is no use.
    # Default: no.
    prefetch-key: yes
